-- BATCH VERSION: 1.1
-- LAST UPDATE: 23/11/2017
-- DEVELOPER: VICTOR CRUZ

-- SHORT DESCRIPTION:
	-- VIEW VENCIMENTO HOJE: CRIA UMA TABELA COM PARCELAS ABERTAS E VENCIMENTO PARA A DATA ATUALIZAR
	-- VIEW CONTRATO_PARCELA_12: CRIA UMA TABELA COM CONTRATOS ABERTOS CUJO NUMERO DE PARCELAS TOTAIS SEJA IGUAL A 12
	-- VIEW CONTRATO_PARCELA_24: CRIA UMA TABELA COM CONTRATOS ABERTOS CUJO NUMERO DE PARCELAS TOTAIS SEJA IGUAL A 24
	-- PROCEDURE ATUALZAR: ATUALIZA O STATUS DAS PARCELAS ABERTAS (TABELA PARCELAS), INSERE MOVIMENTACAO CASO HAJA SALDO(TABELA MOVIMENTACOES), INSERE REGISTRO DE CONTABILIDADE CASO HAJA SALDO (TABELA PLANOCONTABIL)
	-- PROCEDURE ATUALIZAR2: ATUALIZA O STATUS DE TODOS OS CONTRATOS DE 12 PARCELAS QUE ESTÃO TOTALMENTE QUITADOS (TABELA CONTRATOS)
	-- PROCEDURE ATUALIZAR3: ATUALIZA O STATUS DE TODOS OS CONTRATOS DE 24 PARCELAS QUE ESTÃO TOTALMENTE QUITADOS (TABELA CONTRATOS)

-- PRE REQUISITE-01: EXECUTE ALL BEFORE FIRST RUN APPLICATION
-- PRE REQUISITE-02: COMMIT ALL QUERY RUNNING DIRECTLY FROM ORACLE DATABASE

CREATE OR REPLACE VIEW VENCIMENTO_HOJE
    AS
        SELECT DISTINCT
        PARCELAS.NUMCONTRPARC, PARCELAS.NUMPARCELA, PARCELAS.VALORPARCELA, PARCELAS.DATAVENCIMENTO, PARCELAS.STATUSPARCELA,
        PARCELAS.NUMCONTRATO, CONTRATOS.NUMCONTA, CONTACORRENTE.SALDOCONTA
        FROM PARCELAS, CONTRATOS, CONTACORRENTE
        WHERE PARCELAS.STATUSPARCELA = 0 AND
        PARCELAS.NUMCONTRATO = CONTRATOS.CODCONTRATO AND
        CONTRATOS.NUMCONTA = CONTACORRENTE.NUMCONTA AND
        TRUNC(PARCELAS.DATAVENCIMENTO) = TRUNC(SYSDATE);
 /
  
CREATE OR REPLACE VIEW CONTRATO_PARCELA_12 AS
    SELECT PARCELAS.NUMCONTRATO, PARCELAS.NUMPARCELA, PARCELAS.NUMCONTRPARC, 
    PARCELAS.STATUSPARCELA, CONTRATOS.NUMPARCELAS FROM PARCELAS
    INNER JOIN CONTRATOS ON PARCELAS.NUMCONTRATO = CONTRATOS.CODCONTRATO WHERE CONTRATOS.STATUSCONT = 0 AND NUMPARCELAS = 12;
/

        
CREATE OR REPLACE VIEW CONTRATO_PARCELA_24 AS
    SELECT PARCELAS.NUMCONTRATO, PARCELAS.NUMPARCELA, PARCELAS.NUMCONTRPARC, 
    PARCELAS.STATUSPARCELA, CONTRATOS.NUMPARCELAS FROM PARCELAS
    INNER JOIN CONTRATOS ON PARCELAS.NUMCONTRATO = CONTRATOS.CODCONTRATO WHERE CONTRATOS.STATUSCONT = 0 AND NUMPARCELAS = 24;
/

SET SERVEROUTPUT ON
CREATE OR REPLACE PROCEDURE ATUALIZAR
IS
    V_NUMCONTRPARC PARCELAS.NUMCONTRPARC%TYPE;
    V_NUMPARCELA PARCELAS.NUMPARCELA%TYPE;
    V_VALORPARCELA PARCELAS.VALORPARCELA%TYPE;
    V_DATAVENCIMENTO PARCELAS.DATAVENCIMENTO%TYPE;
    V_STATUSPARCELA PARCELAS.STATUSPARCELA%TYPE;
    V_NUMCONTRATO CONTRATOS.CODCONTRATO%TYPE;
    V_NUMCONTA CONTACORRENTE.NUMCONTA%TYPE;
    V_SALDOCONTA CONTACORRENTE.SALDOCONTA%TYPE;
    V_NOVOSALDO CONTACORRENTE.SALDOCONTA%TYPE;
    
    CURSOR C1 IS
        SELECT * FROM VENCIMENTO_HOJE;
       
    BEGIN
        OPEN C1;
        LOOP
            FETCH C1 INTO V_NUMCONTRPARC, V_NUMPARCELA, V_VALORPARCELA, V_DATAVENCIMENTO, V_STATUSPARCELA, 
                V_NUMCONTRATO, V_NUMCONTA, V_SALDOCONTA;
            IF V_SALDOCONTA >= V_VALORPARCELA THEN 
                V_NOVOSALDO := V_SALDOCONTA - V_VALORPARCELA;
                V_STATUSPARCELA := 1;
                INSERT INTO MOVIMENTACOES (CODMOVIMENTACAO, NUMCONTA, TIPOMOVIMENTACAO, DATAMOVIMENTACAO, VALOR, CODLANCAMENTO)
                    SELECT NVL(MAX(CODMOVIMENTACAO), 0)+1, V_NUMCONTA, 0, SYSDATE, V_VALORPARCELA, 107 FROM MOVIMENTACOES;
                INSERT INTO PLANOCONTABIL (CODPLANOCONTABIL, VALOR, DATALANCAMENTO, CODLANCAMENTO) SELECT NVL(MAX(CODPLANOCONTABIL),0)+1, V_VALORPARCELA, SYSDATE, 107 FROM PLANOCONTABIL;
            ELSE
                V_NOVOSALDO := V_SALDOCONTA;
                V_STATUSPARCELA := 2;
            END IF;
            UPDATE CONTACORRENTE SET SALDOCONTA = V_NOVOSALDO WHERE NUMCONTA = V_NUMCONTA;
            UPDATE PARCELAS SET STATUSPARCELA = V_STATUSPARCELA WHERE NUMCONTRPARC = V_NUMCONTRPARC;
            EXIT WHEN C1%NOTFOUND;
        END LOOP;
        CLOSE C1;
END ATUALIZAR;
/

CREATE OR REPLACE PROCEDURE ATUALIZAR2
IS
V_CONTADOR PARCELAS.NUMCONTRATO%TYPE := 0;
V_CONTAGEM PARCELAS.NUMCONTRATO%TYPE;
V_NUMCONTRATO1 PARCELAS.NUMCONTRATO%TYPE;
CURSOR C2 IS SELECT DISTINCT NUMCONTRATO FROM CONTRATO_PARCELA_12;
    BEGIN
    OPEN C2;
        LOOP
            FETCH C2 INTO V_NUMCONTRATO1;
                SELECT DISTINCT SUM(STATUSPARCELA) INTO V_CONTAGEM FROM PARCELAS WHERE NUMCONTRATO = V_NUMCONTRATO1;
                IF V_CONTAGEM >= 12 THEN
                    UPDATE CONTRATOS SET STATUSCONT = 1 WHERE CODCONTRATO = V_NUMCONTRATO1;
                ELSE
                    UPDATE CONTRATOS SET STATUSCONT = 0 WHERE CODCONTRATO = V_NUMCONTRATO1;
                END IF;
                V_CONTADOR := V_CONTADOR + 1;
            EXIT WHEN C2%NOTFOUND;
        END LOOP;
        CLOSE C2;
END ATUALIZAR2;
/

CREATE OR REPLACE PROCEDURE ATUALIZAR3
IS
V_MAX PARCELAS.NUMCONTRATO%TYPE;
V_CONTADOR3 PARCELAS.NUMCONTRATO%TYPE := 0;
V_CONTAGEM3 PARCELAS.NUMCONTRATO%TYPE;
V_NUMCONTRATO3 PARCELAS.NUMCONTRATO%TYPE;
CURSOR C3 IS SELECT DISTINCT NUMCONTRATO FROM CONTRATO_PARCELA_24;
    BEGIN
    
    OPEN C3;
        LOOP
            FETCH C3 INTO V_NUMCONTRATO3;
                SELECT DISTINCT SUM(STATUSPARCELA) INTO V_CONTAGEM3 FROM PARCELAS WHERE NUMCONTRATO = V_NUMCONTRATO3;
                
                
                
                IF V_CONTAGEM3 = 24 THEN
                    UPDATE CONTRATOS SET STATUSCONT = 1 WHERE CODCONTRATO = V_NUMCONTRATO3;
                ELSE
                    UPDATE CONTRATOS SET STATUSCONT = 0 WHERE CODCONTRATO = V_NUMCONTRATO3;
                END IF;
                V_CONTADOR3 := V_CONTADOR3 + 1;
            EXIT WHEN C3%NOTFOUND;
        END LOOP;
        CLOSE C3;
END ATUALIZAR3;
/

COMMIT;


